#!/bin/python3

from cryptography.fernet import Fernet
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("--key", "-key", help="give the key to decrypt file")
parser.add_argument( "file",  help="give filename to stdout")
args = parser.parse_args()

def read_key(filename):
    with open(filename, "rb") as file:
        return file.read()

def read_encrypt_data(filename):
    with open(filename, "rb") as file:
        return file.read()

def do_decrypt_data(encrypt_data, key):
    fernet = Fernet(key)
    return fernet.decrypt(encrypt_data)

def write_decrypt_data(filename, decrypt_data):
    with open(filename, "wb") as file:
        file.write(decrypt_data)
    

def read_plain_data(filename):
    with open(filename, "rb") as file:
        return file.read()

def write_key(key):
    with open("key", "wb") as file:
        file.write(key)

def encrypt_data(key, plain_data):
    fernet = Fernet(key)
    return fernet.encrypt(plain_data)

def write_encrypt_data(filename, encrypt_data):
    with open(filename, "wb") as file:
        file.write(encrypt_data)

if __name__ == "__main__":
    filename = args.file
    if args.key:
        # get the key 
        key = read_key(args.key)

        # get encrypt data from file
        encrypt_data = read_encrypt_data(filename)
        
        # decrypt the data
        decrypt_data = do_decrypt_data(encrypt_data, key)

        # write decrypt data to the original file
        write_decrypt_data(filename, decrypt_data)

    else:
        plain_data = read_plain_data(filename)
        # generate key 
        key = Fernet.generate_key()

        # write key to the file
        write_key(key)

        # encrypt data 
        encrypt_data = encrypt_data(key, plain_data)

        # write encrypt data to the original file
        write_encrypt_data(filename, encrypt_data)
