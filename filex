#!/bin/python3
import argparse
from cryptography.fernet import Fernet

def generate_key():
    """Generates a new encryption key and writes it to the file 'key'"""
    key = Fernet.generate_key()
    with open("key", "wb") as file:
        file.write(key)
    return key

def read_key(key_file):
    """Reads the encryption key from a file"""
    try:
        with open(key_file, "rb") as file:
            return file.read()
    except FileNotFoundError as e:
        print(f"Error: {key_file} not found. Generating a new key...")
        return generate_key()

def encrypt_file(filename, key):
    """Encrypts the contents of a file with the provided key"""
    fernet = Fernet(key)
    with open(filename, "rb") as file:
        plain_data = file.read()
    encrypted_data = fernet.encrypt(plain_data)
    with open(filename, "wb") as file:
        file.write(encrypted_data)

def decrypt_file(filename, key):
    """Decrypts the contents of a file with the provided key"""
    fernet = Fernet(key)
    with open(filename, "rb") as file:
        encrypted_data = file.read()
    decrypted_data = fernet.decrypt(encrypted_data)
    with open(filename, "wb") as file:
        file.write(decrypted_data)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("file", help="File to be encrypted or decrypted")
    parser.add_argument("--key", "-key", help="Key file to be used for decryption")
    args = parser.parse_args()

    key = None if args.key is None else read_key(args.key)
    if key:
        decrypt_file(args.file, key)
    else:
        encrypt_file(args.file, generate_key())
